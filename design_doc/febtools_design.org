In order to calculate integrals (e.g. the j-integral) efficiently, the
solution object must be able to look up values for each element.

To calculate strain energy in post-processing, the material type must
be known.  Unfortunately, FEBio does not store the material identity
anywhere, just the user-defined name, which is usually something
useless like "Mat1".  The J-integral code will therefore require a
mapping from =material_name= in the =.xplt= file to the material class
defined in =waffleiron=.

* Special case data fields

** =shell thickness=

Shell thickness has an item format of =mult=, meaning there is one
value per node per element.  Right now, =_unpack_variable_data()= only
knows how to distinguish between numeric types (float, vector,
matrix), not item formats (node, item, mult).  This will have to be
revised at some point.

For a basic mesh (one material), all the stuff in the =domain= dictionary is defined per element.
A =domain= is explicitly an element set; they are listed in =geometry/domain_section=.

* Specification uncertainties

I am assuming that all integer values in the FEBio binary file format
are encoded as unsigned integers, since the default 4-byte word is
explicitly an unsigned integer.  Additionally, it makes more sense to
use unsigned than signed integers as identifiers.

* Two-dimensional elements

Two-dimensional elements are currently handled by ignoring $x_3$.
This is done so that the Jacobian matrix will be square and therefore
invertible for calculating spatial derivatives.  It is probably
possible to calculate a non-square pseudo-inverse of $J$ that permits
calculation of spatial derivatives including $x_3$, though.


* Coding style
** Indexing conventions

The zero-based index convention is maintained within =waffleiron=.
When output is written, it is translated to a different convention as necessary.
Writing to FEBio XML, for example, is written with indices starting at 1.

** Numeric IDs

Assignment of numeric ids to objects is avoided in favor of aliasing each unique object instance.
Sets of object instances can thus be assembled organically without reference to a separately stored table.

* Faces

Faces are a derived property of the mesh.

* Selecting edges and corners

There's no good way to algorithmically define edges and faces on the scale of a mesh, particularly when element types are mixed.
An edge could be defined by a rapid change in the surface normal, but the threshold would have to be set on a case-by-case basis.
If brick elements alone are considered, a node connected to 1 element must be a corner and a node connected to 2 elements must be an edge; however, nodes that are qualitatively on corners and edges could potentially have more connected elements.

Note that there is currently a =selection.corner_nodes= function, which in light of the above will not always work properly.
It is essentially only useful for meshes that conform to a rectilinear grid.

* Supporting libraries

** 3D geometry

Geometry processing (for selecting mesh regions) is sufficiently complicated that we do not want to implement our own geometry functions.
There does not appear to be a go-to 3D geometry library for python.

CGAL is a C++ geometry library; the [[http://doc.cgal.org/latest/Linear_cell_complex/index.html#Chapter_Linear_Cell_Complex][linear cell complex]] package looks promising for representing an FE mesh.
There are [[https://code.google.com/p/cgal-bindings/wiki/Package_wrappers_available][python bindings]] for CGAL, but although they include halfedge data structures they do not appear to include linear cell complexes.
It may be convenient to create python bindings for linear cell complexes at some point.

PythonOCC includes both constructive solid geometry and meshing functions.
Although there is some [[http://www.pythonocc.org/resources/meshing/pythonocc-and-smesh/][documentation]], I have not yet found anything as comprehensive as the CGAL manual.

[[https://github.com/danieljfarrell/pvtrace][pvtrace]] is a python library for optical ray tracing that includes a constructive geometry library.
It's not widely used, appears to be a single-author package, and does not have active development, so it is not a good candidate for re-use.
However, it may provide some ideas for plotting and utility functions.

* Validation
** TODO Validate that the XML =<material>= elements are assigned ids counting up from one in the order they are written in the XML file
** TODO Check for unique material names

If not unique, issue a warning.
